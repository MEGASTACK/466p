function [x,AR] = HMC(x,Nleapfrog,Nsample,leapfrogstep)

% This function implements the hybrid monte carlo sampling routine.
%
% INPUT : x    =   DXN matrix of postive data vectors where D is dimensionality of the
%                  feature space and N the number of samples. They are the starting
%                  points for the N markov chains.
% Nleapfrog    =   number of leapfrog steps.
%   Nsample    =   number of times the momenta are resampled.
% leapfrogstep =   size of the leapfrogstep.
%
% OUTPUT:  x   =   new matrix of negative data obtained by running the HMC procedure.
%         AR   =   average acceptance rate. The average is taken over resampling steps
%                  and over data (i.e. if Nsample is 1, it is an average over data).
%
% SUBROUTINES:
%  Energy(x)   =   Converts DXN matrix of data 'x' into 1XN array of energies.
% DEnergy(x)   =   Converts DXN matrix of data 'x' into DXN array derivatives of energies.
%                  These functions define the model from which we are sampling.
%
% AUTHOR: MODIFIED - Sridevi Parise


  [D,N] = size(x);

   U_x = Energy(x);   % use your own energy function here

   dUdx = DEnergy(x); % use the derivative of your own energy function here

   for j = 1:Nsample  % loop over momentum resampling steps

   t = x;

   p = randn(D,N);   % initialize momenta

   K_x = sum(p.^2)/2;  % compute kinetic energy

   Dx = dUdx;

   for i=1:Nleapfrog   % loop over leapfrog steps

      p = p - 0.5*leapfrogstep * Dx;

      t = t + leapfrogstep * p;

      Dt =  DEnergy(t);  % use the derivative of your own energy function 
here

      p = p - 0.5*leapfrogstep * Dt;

      Dx = Dt;

   end

      U_t = Energy(t); % use your own energy function here

      K_t = sum(p.^2)/2;

      DH = U_x + K_x - U_t - K_t; % compute difference total energy

      P = min(1,exp(DH));

      A = rand(1,N) < P;  % accept according to metroplis-hastings 
criterium

      x(:,A) = t(:,A);

      U_x(:,A) = U_t(:,A);

      dUdx(:,A) = Dt(:,A);

      ar(j) =  sum(A)/N;   % acceptance rate for this momentum


  end

  AR = mean(ar);  % average acceptance rate
